import { ApolloLink } from 'apollo-link';
import { History } from 'history';
import PropTypes from 'prop-types';
import { Component, ReactElement } from 'react';
import PageCacheControl from '../utils/cacheControl';
import { NavigateOptions } from '../utils/pages';
interface Props {
    children: ReactElement<any> | null;
    history: History | null;
    cacheControl?: PageCacheControl;
    baseURI: string;
    root: string;
    runtime: RenderRuntime;
}
export interface RenderProviderState {
    appsEtag: RenderRuntime['appsEtag'];
    cacheHints: RenderRuntime['cacheHints'];
    components: RenderRuntime['components'];
    culture: RenderRuntime['culture'];
    defaultExtensions: RenderRuntime['defaultExtensions'];
    device: ConfigurationDevice;
    extensions: RenderRuntime['extensions'];
    messages: RenderRuntime['messages'];
    page: RenderRuntime['page'];
    pages: RenderRuntime['pages'];
    preview: RenderRuntime['preview'];
    production: RenderRuntime['production'];
    query: RenderRuntime['query'];
    settings: RenderRuntime['settings'];
    route: RenderRuntime['route'];
    loadedPages: Set<string>;
    blocksTree?: RenderRuntime['blocksTree'];
    blocks?: RenderRuntime['blocks'];
    contentMap?: RenderRuntime['contentMap'];
}
declare class RenderProvider extends Component<Props, RenderProviderState> {
    static childContextTypes: {
        account: PropTypes.Requireable<string>;
        addMessages: PropTypes.Requireable<(...args: any[]) => any>;
        blocks: PropTypes.Requireable<object>;
        blocksTree: PropTypes.Requireable<object>;
        contentMap: PropTypes.Requireable<object>;
        components: PropTypes.Requireable<object>;
        culture: PropTypes.Requireable<object>;
        defaultExtensions: PropTypes.Requireable<object>;
        device: PropTypes.Requireable<string>;
        emitter: PropTypes.Requireable<object>;
        ensureSession: PropTypes.Requireable<(...args: any[]) => any>;
        extensions: PropTypes.Requireable<object>;
        fetchComponent: PropTypes.Requireable<(...args: any[]) => any>;
        getSettings: PropTypes.Requireable<(...args: any[]) => any>;
        goBack: PropTypes.Requireable<(...args: any[]) => any>;
        hints: PropTypes.Requireable<object>;
        history: PropTypes.Requireable<object>;
        messages: PropTypes.Requireable<object>;
        navigate: PropTypes.Requireable<(...args: any[]) => any>;
        onPageChanged: PropTypes.Requireable<(...args: any[]) => any>;
        page: PropTypes.Requireable<string>;
        pages: PropTypes.Requireable<object>;
        patchSession: PropTypes.Requireable<(...args: any[]) => any>;
        prefetchDefaultPages: PropTypes.Requireable<(...args: any[]) => any>;
        prefetchPage: PropTypes.Requireable<(...args: any[]) => any>;
        preview: PropTypes.Requireable<boolean>;
        production: PropTypes.Requireable<boolean>;
        publicEndpoint: PropTypes.Requireable<string>;
        query: PropTypes.Requireable<object>;
        renderMajor: PropTypes.Requireable<number>;
        rootPath: PropTypes.Requireable<string>;
        route: PropTypes.Requireable<object>;
        setDevice: PropTypes.Requireable<(...args: any[]) => any>;
        setQuery: PropTypes.Requireable<(...args: any[]) => any>;
        updateComponentAssets: PropTypes.Requireable<(...args: any[]) => any>;
        updateExtension: PropTypes.Requireable<(...args: any[]) => any>;
        updateRuntime: PropTypes.Requireable<(...args: any[]) => any>;
        workspace: PropTypes.Requireable<string>;
    };
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactElementLike>;
        history: PropTypes.Requireable<object>;
        root: PropTypes.Requireable<string>;
        runtime: PropTypes.Requireable<object>;
    };
    sendInfoFromIframe: ((params?: {
        shouldUpdateRuntime?: boolean | undefined;
    } | undefined) => Promise<void> | undefined) & {
        clear(): void;
    } & {
        flush(): void;
    };
    private rendered;
    private sessionPromise;
    private unlisten;
    private apolloClient;
    constructor(props: Props);
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: Props): void;
    componentWillUnmount(): void;
    getChildContext(): {
        account: string;
        addMessages: (newMessages: any) => Promise<void>;
        components: Components;
        culture: Culture;
        defaultExtensions: Extensions;
        device: ConfigurationDevice;
        emitter: any;
        ensureSession: () => Promise<void>;
        extensions: Extensions;
        fetchComponent: (component: string) => Promise<void>;
        getSettings: (app: string) => any;
        goBack: () => boolean;
        hints: any;
        history: History<any> | null;
        messages: any;
        navigate: (options: NavigateOptions) => boolean;
        onPageChanged: (location: RenderHistoryLocation) => void | Promise<void>;
        page: string;
        pages: Pages;
        patchSession: (data?: any) => Promise<void>;
        prefetchDefaultPages: (routeIds: string[]) => Promise<void>;
        prefetchPage: (pageName: string) => void;
        preview: boolean;
        production: boolean;
        publicEndpoint: string;
        query: Record<string, string> | undefined;
        renderMajor: number;
        rootPath: string | undefined;
        route: Route;
        setDevice: (device: ConfigurationDevice) => void;
        setQuery: (query?: Record<string, any>, { merge, replace, scrollOptions, }?: SetQueryOptions) => boolean;
        updateComponentAssets: (availableComponents: Components) => void;
        updateExtension: (name: string, extension: Extension) => Promise<void>;
        updateRuntime: (options?: PageContextOptions | undefined) => Promise<void>;
        workspace: string;
    };
    getSettings: (app: string) => any;
    ensureSession: () => Promise<void>;
    patchSession: (data?: any) => Promise<void>;
    getCustomMessages: (locale: string) => any;
    goBack: () => boolean;
    setQuery: (query?: Record<string, any>, { merge, replace, scrollOptions, }?: SetQueryOptions) => boolean;
    navigate: (options: NavigateOptions) => boolean;
    replaceRouteClass: (route: string) => void;
    scrollTo: (scrollOptions?: false | RelativeScrollToOptions | undefined) => void;
    afterPageChanged: (route: string, scrollOptions?: false | RelativeScrollToOptions | undefined) => void;
    onPageChanged: (location: RenderHistoryLocation) => void | Promise<void>;
    prefetchPage: (pageName: string) => void;
    prefetchDefaultPages: (routeIds: string[]) => Promise<void>;
    updateComponentAssets: (availableComponents: Components) => void;
    fetchComponent: (component: string) => Promise<void>;
    onLocaleSelected: (locale: string, domain?: string | undefined) => void;
    updateRuntime: (options?: PageContextOptions | undefined) => Promise<void>;
    createEnsureSessionLink(): ApolloLink;
    createRuntimeContextLink(): ApolloLink;
    updateExtension: (name: string, extension: Extension) => Promise<void>;
    handleSetDevice: (device: ConfigurationDevice) => void;
    addMessages: (newMessages: any) => Promise<void>;
    render(): JSX.Element;
    private updateMessages;
}
export default RenderProvider;
